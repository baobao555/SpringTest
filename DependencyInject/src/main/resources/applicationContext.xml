<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--    bean标签
作用： 用于配置对象让spring来创建的。 默认情况下它调用的是类中的无参构造函数。
       如果没有无参构造函数则不能创建成功。
属性：
id：给对象在容器中提供一个唯一标识。用于获取对象。
class：指定类的全限定类名。用于反射创建对象。默认情况下调用无参构造函数。
scope：指定对象的作用范围。 * singleton :默认值，单例的.
                          * prototype :多例的.
                          * request :WEB项目中,Spring创建一个Bean的对象,将对象存入到request域中.
                          * session :WEB项目中,Spring创建一个Bean的对象,将对象存入到session域中.
                          * global session :WEB项目中,应用在Portlet环境.如果没有Portlet环境那么globalSession相当于session.
   单例对象：scope="singleton" 一个应用只有一个对象的实例。它的作用范围就是整个引用。
        生命周期： 对象出生：当应用加载，创建容器时，对象就被创建了。
                  对象活着：只要容器在，对象一直活着。
                  对象死亡：当应用卸载，销毁容器时，对象就被销毁了。
   多例对象：scope="prototype" 每次访问对象时，都会重新创建对象实例。
        生命周期： 对象出生：当使用对象时，创建新的对象实例。
                  对象活着：只要对象在使用中，就一直活着。
                  对象死亡：当对象长时间不用时，被java的垃圾回收器回收了。
init-method：指定类中的初始化方法名称。 destroy-method：指定类中销毁方法名称。-->


    <!-- DI方式一：通过配置文件给bean中的属性传值：本质是调用set方法的方式
    涉及的标签： property
                属性：
                name：找的是类中set方法后面的部分
                ref：给属性赋值是其他bean类型的
                value：给属性赋值是基本数据类型和string类型的
                实际开发中，此种方式用的较多。-->
   <bean id="person1" class="com.baobao.springtest.di.bean.Person">
       <property name="name" value="baobao1"/>
       <property name="age" value="18"/>
       <property name="job" value="coder"/>
       <property name="address" ref="address1"/>
   </bean>

    <!-- DI方式二：使用构造函数的方式
    要求： 类中需要提供一个对应参数列表的构造函数。
    涉及的标签： constructor-arg
                属性： index:指定参数在构造函数参数列表的索引位置
                       type:指定参数在构造函数中的数据类型
                       name:指定参数在构造函数中的名称 用这个找给谁赋值
                       =======上面三个都是找给谁赋值，下面两个指的是赋什么值的==============
                       value:它能赋的值是基本数据类型和String类型
                       ref:它能赋的值是其他bean类型，也就是说，必须得是在配置文件中配置过的bean-->
    <bean id="person2" class="com.baobao.springtest.di.bean.Person">
        <constructor-arg name="name" value="baobao2"/>
        <constructor-arg name="age" value="28"/>
        <constructor-arg name="job" value="coder"/>
    </bean>

    <!--注入引用类型属性-->
    <!--构造一个Address-->
    <bean id="address1" class="com.baobao.springtest.di.bean.Address">
        <property name="country" value="China"/>
        <property name="province" value="ZheJiang"/>
    </bean>

    <!--方式1：ref属性引用对应bean的id-->
    <bean id="person3" class="com.baobao.springtest.di.bean.Person">
        <property name="name" value="baobao3"/>
        <property name="age" value="30"/>
        <property name="job" value="coder"/>
        <!--将Address的id作为ref的值-->
        <property name="address" ref="address1"/>
    </bean>

    <!--方式2：级联属性赋值-->
    <bean id="address2" class="com.baobao.springtest.di.bean.Address"/>

    <bean id="person4" class="com.baobao.springtest.di.bean.Person">
        <property name="name" value="baobao3"/>
        <property name="age" value="30"/>
        <property name="job" value="coder"/>
        <!--级联方式赋值之前必须先给引用类型对象赋值，否则会空指针异常-->
        <property name="address" ref="address2"/>
        <!--级联方式给address的属性逐个赋值-->
        <property name="address.country" value="America"/>
        <property name="address.province" value="Detroit"/>
    </bean>

    <!--方式3：内部定义bean-->
    <bean id="person5" class="com.baobao.springtest.di.bean.Person">
        <property name="name" value="baobao3"/>
        <property name="age" value="30"/>
        <property name="job" value="coder"/>
        <!--内部bean-->
        <property name="address">
            <bean class="com.baobao.springtest.di.bean.Address">
                <property name="country" value="England"/>
                <property name="province" value="Manchester"/>
            </bean>
        </property>
    </bean>

    <!--注入List类型属性-->
    <bean id="person6" class="com.baobao.springtest.di.bean.Person">
        <property name="name" value="baobao6"/>
        <property name="age" value="30"/>
        <property name="job" value="coder"/>
        <!--将Address的id作为ref的值-->
        <property name="address" ref="address1"/>
        <!--注入list-->
        <property name="addList">
            <list>
                <ref bean="address1"/>
                <ref bean="address2"/>
            </list>
        </property>
        <!--注入set-->
        <property name="addSet">
            <set>
                <value>address1</value>
                <value>address2</value>
                <value>address3</value>
            </set>
        </property>
        <!--注入map-->
        <property name="addMap">
            <map>
                <entry key="address1" value-ref="address1"/>
                <entry key="address2" value-ref="address2"/>
            </map>
        </property>
    </bean>

    <!--DI方式三：使用p名称空间（本质还是调用set方法）注入属性
    此种方式是通过在xml中导入p名称空间，使用p:propertyName来注入数据，它的本质仍然是调用类中的set方法实现注入功能
    配置文件头部约束加入xmlns:p="http://www.springframework.org/schema/p"   -->
    <bean id="person7" class="com.baobao.springtest.di.bean.Person"
          p:name="baobao7" p:age="38" p:job="coder" p:address-ref="address1"/>

    <!--bean的继承关系:
    通过bean标签的parent属性指定继承哪个bean，可以继承该bean的所有属性，重新赋值的属性会覆盖原有属性
    -->
    <bean id="person8" class="com.baobao.springtest.di.bean.Person"
          parent="person7">
        <property name="address" ref="address2"/>
    </bean>

    <!--可以指定一个模板bean，声明为抽象的，抽象bean不能被实例化，只能由其他bean继承。
    如果定义bean时不指定class属性，那么该bean必须为抽象bean
    -->
    <bean id="abstractPerson" abstract="true">
        <property name="name" value="abstractBaobao"/>
    </bean>

    <bean id="person9" class="com.baobao.springtest.di.bean.Person" parent="abstractPerson">
        <property name="age" value="20"/>
        <property name="job" value="coder"/>
    </bean>

    <!--bean的依赖关系-->
    <bean id="address3" class="com.baobao.springtest.di.bean.Address">
        <property name="country" value="Japan"/>
        <property name="province" value="Tokyo"/>
    </bean>
    <!--person10配置depends-on属性，代表depends-on依赖的address3必须先配置并初始化，否则实例化person10失败-->
    <bean id="person10" class="com.baobao.springtest.di.bean.Person" depends-on="address3">
        <property name="name" value="baobao10"/>
        <property name="age" value="30"/>
        <property name="job" value="network"/>
    </bean>

</beans>